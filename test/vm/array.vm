push 0 #  INTEGER
mov (esp) 10
# start array size 10
push 0
push 0
push 0
push 0
push 0
push 0
push 0
push 0
push 0
push 0
main:
push ebp # save base pointer 45
mov ebp esp
push ebp # save base pointer 45
mov ebp esp
# for loop initiailzer 42
push 0 #  INTEGER
push 0 #  INTEGER
mov (esp) 0
mov -1(ebp) -2(ebp)
loop_start42: # for 42
push ebp # save base pointer 46
mov ebp esp
push 0 #  INTEGER
mov (esp) 10
push 0 #  INTEGER
cmp 2(ebp) -1(ebp)
setl -2(ebp)
cmp -2(ebp) 0
add esp 8
pop ebp # restore base pointer 46
je loop_end42
push ebp # save base pointer 46
mov ebp esp
mem esi ebp
add esi 14
push esi
mov ecx -1(ebp) # get subscript base address
mov edx 2(ebp)
mul edx 1
sub ecx edx # add subscript offset
push ecx # subscript element
mov -2{ebp} 2(ebp)
mem esi ebp
add esi 14
push esi
mov ecx -3(ebp) # get subscript base address
mov edx 2(ebp)
mul edx 1
sub ecx edx # add subscript offset
push ecx # subscript element
prn -4{ebp}
push 0 #  INTEGER
mov -5(ebp) 2(ebp)
add 2(ebp) 1
add esp 20
pop ebp # restore base pointer 46
jmp loop_start42
loop_end42: # end of for 42
add esp 8
pop ebp # restore base pointer 45
add esp 0
pop ebp # restore base pointer 0