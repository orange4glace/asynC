main:
push ebp # save base pointer 75
mov ebp esp
push 0 #  INTEGER
mov (esp) 10
# start array size 10
push 0
push 0
push 0
push 0
push 0
push 0
push 0
push 0
push 0
push 0
push 0 #  POINTER
push 0 #  POINTER
mem esi ebp
add esi -2
push esi
mov -13(ebp) -14(ebp) # array -> pointer
mov -12(ebp) -13(ebp)
push ebp # save base pointer 75
mov ebp esp
# for loop initiailzer 50
push 0 #  INTEGER
push 0 #  INTEGER
mov (esp) 0
mov -1(ebp) -2(ebp)
loop_start50: # for 50
push ebp # save base pointer 76
mov ebp esp
push 0 #  INTEGER
mov (esp) 10
push 0 #  INTEGER
cmp 2(ebp) -1(ebp)
setl -2(ebp)
cmp -2(ebp) 0
add esp 8
pop ebp # restore base pointer 76
je loop_end50
push ebp # save base pointer 76
mov ebp esp
mov ecx 6(ebp) # get subscript base address
mov edx 2(ebp)
mul edx 1
sub ecx edx # add subscript offset
push ecx # subscript element
mov -1{ebp} 2(ebp)
push 0 #  INTEGER
mov -2(ebp) 2(ebp)
add 2(ebp) 1
add esp 8
pop ebp # restore base pointer 76
jmp loop_start50
loop_end50: # end of for 50
add esp 8
pop ebp # restore base pointer 75
push ebp # save base pointer 75
mov ebp esp
# for loop initiailzer 72
push 0 #  INTEGER
push 0 #  INTEGER
mov (esp) 0
mov -1(ebp) -2(ebp)
loop_start72: # for 72
push ebp # save base pointer 79
mov ebp esp
push 0 #  INTEGER
mov (esp) 10
push 0 #  INTEGER
cmp 2(ebp) -1(ebp)
setl -2(ebp)
cmp -2(ebp) 0
add esp 8
pop ebp # restore base pointer 79
je loop_end72
push ebp # save base pointer 79
mov ebp esp
mem esi ebp
add esi 16
push esi
mov ecx -1(ebp) # get subscript base address
mov edx 2(ebp)
mul edx 1
sub ecx edx # add subscript offset
push ecx # subscript element
prn -2{ebp}
push 0 #  INTEGER
mov -3(ebp) 2(ebp)
add 2(ebp) 1
add esp 12
pop ebp # restore base pointer 79
jmp loop_start72
loop_end72: # end of for 72
add esp 8
pop ebp # restore base pointer 75
add esp 56
pop ebp # restore base pointer 0